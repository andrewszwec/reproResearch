mrcars
mtcars
library("mboost")
library("rpart")
data("bodyfat", package = "mboost")
bodyfat_rpart <- rpart(DEXfat ~ age + waistcirc + hipcirc +
elbowbreadth + kneebreadth, data = bodyfat,
control = rpart.control(minsplit = 10))
library("partykit")
plot(as.party(bodyfat_rpart), tp_args = list(id = false))
plot(as.party(bodyfat_rpart), tp_args = list(id = FALSE))
print(bodyfat_rpart$cptable)
opt <- which.min(bodyfat_rpart$cptable[,"xerror"])
opt
cp <- bodyfat_rpart$cptable[opt,"CP"]
cp
bodyfat_prune <- prune(bodyfat, cp=cp)
plot(as.part(bodyfat_prune), tp_args = list(id = FALSE))
cp <- bodyfat_rpart$cptable[opt,"CP"]
bodyfat_prune <- prune(bodyfat, cp=cp)
cp <- bodyfat_rpart$cptable[opt,"CP"]
bodyfat_prune <- prune(bodyfat_rpart, cp=cp)
plot(as.part(bodyfat_prune), tp_args = list(id = FALSE))
plot(as.party(bodyfat_prune), tp_args = list(id = FALSE))
plot(as.party(bodyfat_prune), tp_args = list(id = FALSE))
set.seed(290875)
DEXfat_pred <- predict(bodyfat_prune, newdata = bodyfat)
xlim <- range(bodyfat$DEXfat)
plot(DEXfat_pred ~ DEXfat, data = bodyfat, xlab = "Observed",
ylab = "Predicted",
ylim = xlim,
xlim = xlim )
abline(a = 0, b = 1)
bodyfat_ctree <- ctree(DEXfat ~ age + waistcirc + hipcirc +
elbowbreadth + kneebreadth, data = bodyfat)
library("party")
bodyfat_ctree <- ctree(DEXfat ~ age + waistcirc + hipcirc +
elbowbreadth + kneebreadth, data = bodyfat)
install.packages("party")
library("party")
bodyfat_ctree <- ctree(DEXfat ~ age + waistcirc + hipcirc +
elbowbreadth + kneebreadth, data = bodyfat)
ctree
bodyfat_ctree <- ctree(DEXfat ~ age + waistcirc + hipcirc +
elbowbreadth + kneebreadth, data = bodyfat)
plot(bodyfat_ctree)
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam[,1:5])
set.seed(3435)
set.seed(3435)
trainIndicator = rbinom(4601, size=1, prob=0.5)
table(trainIndicator)
trainSpam = spam[ trainIndicator == 1, ]
testSpam = spam[ trainIndicator == 0, ]
names(trainSpam)
head(trainSpam)
plot(trainSpam$campitalAve ~ trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve+1) ~ trainSpam$type)
plot(log10(trainSpam[,1:4]+1)
)
hCluster = hclust(dist(t(trainSpam[,1:57])))
plot(hCluster)
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x,y) sum( x != (y>0.5) )
cvError = rep(NA, 55)
library(boot)
for(i in 1:55)
{
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam )
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
## Which predictor has minum cross-validated error?
names(trainSpam)[which.min(cvError)]
predictionModel = glm(numType ~ charDollar, family="binomial", data = trainSpam)
# Get predictions on the test set
predictionTest = predict(predictionModel, testSpam)
predictionSpam = rep("nonspam", dim(testSpam)[1])
## Classify as 'spam' for those with prob > 0.5
predictedSpam[predictionModel$fitted > 0.5] = "spam"
predictionSpam[predictionModel$fitted > 0.5] = "spam"
head(predictionSpam)
table(predictedSpam, testSpam$type)
table(predictionSpam, testSpam$type)
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **MD** toolbar button for help on Markdown).
install.packages("ProjectTemplate")
setwd("~/Documents/Coursera/dataScienceSpecialisation/reproResearch")
setwd("~/Documents/Coursera/dataScienceSpecialisation/reproResearch/ProjectTemplate-lib")
library("ProjectTemplate")
create.project("letters")
ls
ls()
dir()
cd letters
mv
load.project()
library("ProjectTemplate")
# create.project("letters")
setwd("/Users/andrewszwec/Documents/Coursera/dataScienceSpecialisation/reproResearch/ProjectTemplate-lib/letters/data")
load.project()
load.project()
# create.project("letters")
library("ProjectTemplate")
setwd("/Users/andrewszwec/Documents/Coursera/dataScienceSpecialisation/reproResearch/ProjectTemplate-lib/letters")
load.project()
# create.project("letters")
library("ProjectTemplate")
setwd("/Users/andrewszwec/Documents/Coursera/dataScienceSpecialisation/reproResearch/ProjectTemplate-lib/letters")
load.project()
# create.project("letters")
library("ProjectTemplate")
setwd("/Users/andrewszwec/Documents/Coursera/dataScienceSpecialisation/reproResearch/ProjectTemplate-lib/letters")
load.project()
cache('first.letter.counts')
cache('second.letter.counts')
library("ProjectTemplate")
setwd("/Users/andrewszwec/Documents/Coursera/dataScienceSpecialisation/reproResearch/ProjectTemplate-lib/letters")
load.project()
# create.project("letters")
library("ProjectTemplate")
setwd("/Users/andrewszwec/Documents/Coursera/dataScienceSpecialisation/reproResearch/ProjectTemplate-lib/letters")
load.project()
source('src/generate_plots.R')
